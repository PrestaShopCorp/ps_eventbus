name: Quality Control

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
  push:
    branches:
      - "main"

jobs:
  php-linter:
    name: PHP Syntax check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ["7.2", "7.3", "7.4", "8.0", "8.1"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: PHP syntax checker ${{ matrix.php_version }}
        run: PHP_VERSION=${{ matrix.php_version }} make docker-php-lint

  composer-validate:
    name: Composer validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run composer validate
        run: make composer-validate

  php-cs-fixer:
    name: PHP-CS-FIXER
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache vendor folder
        uses: actions/cache@v1
        with:
          path: vendor
          key: php-${{ hashFiles('composer.lock') }}
      - name: Install dependencies
        run: composer install
      - name: Run PHP-CS-Fixer
        run: make lint

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        presta_version: ["1.7.8.7"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache vendor folder
        uses: actions/cache@v1
        with:
          path: vendor
          key: php-${{ hashFiles('composer.lock') }}
      - name: Install dependencies
        run: composer install
      - name: PHPStan PrestaShop 1.7.8.7
        run: PS_VERSION="1.7.8.7" PHP_VERSION="8.1" make docker-phpstan

  phpunit:
    name: PHP Unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache vendor folder
        uses: actions/cache@v1
        with:
          path: vendor
          key: php-${{ hashFiles('composer.lock') }}
      - name: Install dependencies
        run: composer install
      - name: PHP unit with PHP 8.1
        run: PHP_VERSION="8.1" make docker-phpunit

      # - name: üìä Step 5 - Collect Allure files and generate allure-report folder
      #   run: |
      #     make allure-report
      # - name: üéÅ Step 6 - Publishing Allure artifact to GitHub Actions
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: allure-report
      #     path: allure-report
      # - name: üéÅ Step 7 - Publishing Code coverage report to GitHub Actions
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: code-coverage-report
      #     path: tests/tmp/code-coverage-report
